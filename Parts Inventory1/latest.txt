using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Parts_Inventory1
{
    public partial class Form1 : Form
    {
        SqlConnection con;
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            dateReceived.Format = DateTimePickerFormat.Short;
            dateReceived.ShowUpDown = false;
            dateReceived.Value = DateTime.Today;
            textBox2.TextChanged += textBox2_TextChanged;
        }
        string connectionString = @"Data Source=192.168.1.2;Database=testJoy;User Id=sa;Password=lease-return;MultipleActiveResultSets=True;";
        //string connectionString = @"Data Source=192.168.1.2;Database=JoyData;User Id=sa;Password=lease-return;MultipleActiveResultSets=True;";


        private void cboSelect_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void txtSubN_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtSapN_TextChanged(object sender, EventArgs e)
        {

        }

        private void cboSystem_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void tab_Purchase_Click(object sender, EventArgs e)
        {

        }

        private void tab_Pull_Click(object sender, EventArgs e)
        {
            typeIdx = 0;
        }

        private void cboSelect_SelectedIndexChanged_1(object sender, EventArgs e)
        {
            string selectedComponent = cboSelect.SelectedItem?.ToString() ?? string.Empty;

            if (string.IsNullOrEmpty(selectedComponent))
            {
                return;
            }

            switch (selectedComponent)
            {
                case "CPU":
                    typeIdx = 11;
                    break;
                case "RAM":
                    typeIdx = 12;
                    break;
                case "HDD":
                    typeIdx = 13;
                    break;
                case "ODD":
                    typeIdx = 14;
                    break;
                default:
                    typeIdx = 0;
                    break;
            }
        }

        private int typeIdx = 2;
        private void cboSystem_SelectedIndexChanged_1(object sender, EventArgs e)
        {
            string selectedSystemValue = cboSystem.SelectedItem?.ToString() ?? string.Empty;

            if (string.IsNullOrEmpty(selectedSystemValue))
            {
                return;
            }

            typeIdx = selectedSystemValue == "SYSTEM DT" ? 2 : 0;
            typeIdx = selectedSystemValue == "LAPTOP LT" ? 3 : typeIdx;

            if (typeIdx == 0) return;

            string query = $@"SELECT * FROM subType
              WHERE typeIdx = {typeIdx} ORDER BY subTypeName;";

            using (SqlConnection con = new SqlConnection(connectionString))
            {
                con.Open();
                using (SqlCommand cmd = new SqlCommand(query, con))
                {
                    SqlDataAdapter da = new SqlDataAdapter(cmd);
                    DataTable dt = new DataTable();
                    da.Fill(dt);

                    dataGridView1.DataSource = dt;
                }
                con.Close();
            }
        }

        private void btnInsert_Click(object sender, EventArgs e)
        {
            var lastEntered = DateTime.Now;
            int typeIdx = GetTypeIdxFromSelectedComponent();
            int enterIdx;
            int componentIdx;
            string inout;
            int qty;

            // 'Purchase' 탭과 'Pull Out' 탭에서 각각 enteredDate와 qty를 설정합니다.
            DateTime enteredDate;
            if (tabControl1.SelectedTab == tab_Purchase)
            {
                enteredDate = dateReceived.Value.Date; // 'Purchase' 탭의 dateTimePicker 컨트롤의 이름이 dateReceived라고 가정합니다.
                enterIdx = GetEnterIdxFromSapNum(txtSap.Text);
                componentIdx = GetComponentIdxFromComponent(txtCompo.Text);
                inout = cboInout.SelectedItem?.ToString();
                qty = int.Parse(txtQty.Text); // 'Purchase' 탭의 수량 입력 필드 이름이 txtQty라고 가정합니다.
            }
            else if (tabControl1.SelectedTab == tab_Pull)
            {
                enteredDate = dateTimePicker1.Value.Date;
                enterIdx = 0;
                componentIdx = GetComponentIdxFromComponent(txtCompo.Text);
                inout = comboBox2.SelectedItem?.ToString();
                qty = int.Parse(textBox3.Text); // 'Pull Out' 탭의 수량 입력 필드 이름이 textBox3입니다.
            }
            else
            {
                // 오류 처리
                MessageBox.Show("Please select a valid tab.");
                return;
            }

            string query = @"
            DECLARE @NewID INT;
            INSERT INTO component_T (typeIdx, enterIdx, componentIdx, inout, qty, enteredDate, lastEntered) 
            VALUES (@typeIdx, @enterIdx, @componentIdx, @inout, @qty, @enteredDate, @lastEntered);
            SET @NewID = SCOPE_IDENTITY();
            SELECT * FROM component_T WHERE idx = @NewID;";

            using (SqlConnection con = new SqlConnection(connectionString))
            {
                try
                {
                    con.Open();
                    using (SqlCommand cmd = new SqlCommand(query, con))
                    {
                        cmd.Parameters.AddWithValue("@typeIdx", typeIdx);
                        cmd.Parameters.AddWithValue("@enterIdx", enterIdx);
                        cmd.Parameters.AddWithValue("@componentIdx", componentIdx);
                        cmd.Parameters.AddWithValue("@inout", inout);
                        cmd.Parameters.AddWithValue("@qty", qty);
                        cmd.Parameters.AddWithValue("@enteredDate", enteredDate);
                        cmd.Parameters.AddWithValue("@lastEntered", lastEntered);

                        var newId = (int)cmd.ExecuteScalar();

                        if (newId > 0)
                        {
                            MessageBox.Show("Successfully inserted.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);

                            RefreshDataGridView(newId);
                        }
                        else
                        {
                            MessageBox.Show("No data was inserted.", "Notice", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"An error occurred: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                finally
                {
                    con.Close();
                }
            }
        }
        private void RefreshDataGridView(int newId)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                con.Open();
                string query = "SELECT * FROM component_T WHERE idx = @newId";
                using (SqlCommand cmd = new SqlCommand(query, con))
                {
                    cmd.Parameters.AddWithValue("@newId", newId);
                    SqlDataAdapter da = new SqlDataAdapter(cmd);
                    DataTable dt = new DataTable();
                    da.Fill(dt);

                    dataGridView1.DataSource = dt;
                }
                con.Close();
            }
        }
        private void LoadDataToDataGridView()
        {
            string query = "SELECT * FROM component_T ORDER BY enteredDate DESC";

            using (SqlConnection con = new SqlConnection(connectionString))
            {
                con.Open();
                using (SqlCommand cmd = new SqlCommand(query, con))
                {
                    SqlDataAdapter da = new SqlDataAdapter(cmd);
                    DataTable dt = new DataTable();
                    da.Fill(dt);

                    dataGridView1.DataSource = dt;
                }
                con.Close();
            }
        }

        private int GetTypeIdxFromSelectedComponent()
        {
            string selectedComponent;
            if (tabControl1.SelectedTab == tab_Purchase)
            {
                selectedComponent = cboSelect.SelectedItem?.ToString() ?? string.Empty;
            }
            else if (tabControl1.SelectedTab == tab_Pull)
            {
                selectedComponent = comboBox1.SelectedItem?.ToString() ?? string.Empty;
            }
            else
            {
                return 0;
            }

            switch (selectedComponent)
            {
                case "CPU": return 11;
                case "RAM": return 12;
                case "HDD": return 13;
                case "ODD": return 14;
                default: return 0; 
            }
        }

        private int GetEnterIdxFromSapNum(string sapNum)
        {
            int enterIdx = 0;
            string query = "SELECT idx FROM Sap WHERE sapNum LIKE @sapNum";

            using (SqlConnection con = new SqlConnection(connectionString))
            {
                con.Open();
                using (SqlCommand cmd = new SqlCommand(query, con))
                {
                    cmd.Parameters.AddWithValue("@sapNum", "%" + sapNum + "%");
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            enterIdx = reader.GetInt32(reader.GetOrdinal("idx"));
                        }
                    }
                }
                con.Close();
            }
            return enterIdx;
        }

        private int GetComponentIdxFromComponent(string componentValue)
        {
            int componentIdx = 0;
            string query = "SELECT idx FROM TypeSize WHERE typeIdx = @typeIdx AND typeSizeName LIKE @componentValue";

            using (SqlConnection con = new SqlConnection(connectionString))
            {
                con.Open();
                using (SqlCommand cmd = new SqlCommand(query, con))
                {
                    cmd.Parameters.AddWithValue("@typeIdx", typeIdx);
                    cmd.Parameters.AddWithValue("@componentValue", $"%{componentValue}%");
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            componentIdx = reader.GetInt32(reader.GetOrdinal("idx"));
                        }
                    }
                }
                con.Close();
            }
            return componentIdx;
        }

        private void txtCompo_TextChanged(object sender, EventArgs e)
        {
            string inputText = txtCompo.Text;

            if (!string.IsNullOrEmpty(inputText) && typeIdx != 0)
            {
                string query = $"SELECT * FROM TypeSize WHERE typeIdx = {typeIdx} AND typeSizeName LIKE '%{inputText}%'";

                using (SqlConnection con = new SqlConnection(connectionString))
                {
                    con.Open();
                    using (SqlCommand cmd = new SqlCommand(query, con))
                    {
                        SqlDataAdapter da = new SqlDataAdapter(cmd);
                        DataTable dt = new DataTable();
                        da.Fill(dt);

                        dataGridView1.DataSource = dt;
                    }
                    con.Close();
                }
            }
        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                if (dataGridView1.Columns[e.ColumnIndex].Name == "sapNum")
                {
                    var sapNum = dataGridView1.Rows[e.RowIndex].Cells["sapNum"].Value.ToString();
                    txtSap.Text = sapNum;
                }
                else if (dataGridView1.Columns[e.ColumnIndex].Name == "typeSizeName")
                {
                    var typeSizeName = dataGridView1.Rows[e.RowIndex].Cells["typeSizeName"].Value.ToString();
                    txtCompo.Text = typeSizeName;
                    textBox2.Text = typeSizeName;
                }
            }
        }

        private void LoadData(string query)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                con.Open();
                using (SqlCommand cmd = new SqlCommand(query, con))
                {
                    SqlDataAdapter da = new SqlDataAdapter(cmd);
                    DataTable dt = new DataTable();
                    da.Fill(dt);
                    dataGridView1.DataSource = dt;
                }
                con.Close();
            }
        }

        private void txtSap_TextChanged(object sender, EventArgs e)
        {
            string inputText = txtSap.Text;

            if (!string.IsNullOrEmpty(inputText))
            {
                string query = $@"
            SELECT DISTINCT Sap.idx, Sap.sapNum, sapDate, lastentered
            FROM Sap
            JOIN sapdetail ON Sap.idx = sapdetail.sapidx
            JOIN Type ON sapdetail.typeIdx = Type.idx
            WHERE Sap.lastentered >= DATEADD(MONTH, -3, CAST(GETDATE() AS DATE))
            AND (Type.typeName = 'component' OR Type.idx = 6)
            AND Sap.sapNum LIKE '%{inputText}%';";

                LoadData(query);
            }
        }

        private void btnReset_Click(object sender, EventArgs e)
        {
            txtCompo.Clear();
            textBox2.Clear();

            if (tabControl1.SelectedTab == tab_Purchase)
            {
                cboSelect.SelectedIndex = -1;
                cboSystem.SelectedIndex = -1;
                cboInout.SelectedIndex = -1;
                txtQty.Clear();
                txtSap.Clear();
            }
            else if (tabControl1.SelectedTab == tab_Pull)
            {
                comboBox1.SelectedIndex = -1;
                comboBox3.SelectedIndex = -1;
                comboBox2.SelectedIndex = -1;
                textBox3.Clear();
            }

            dataGridView1.ClearSelection();
        }
        private void btnUpdate_Click(object sender, EventArgs e)
        {
            
        }

        private void btnDelete_Click(object sender, EventArgs e)
        {
            if (dataGridView1.SelectedRows.Count > 0)
            {
                var confirmResult = MessageBox.Show("Are you sure to delete this item?",
                                                    "Confirm Delete",
                                                    MessageBoxButtons.YesNo,
                                                    MessageBoxIcon.Question);
                if (confirmResult == DialogResult.Yes)
                {
                    var selectedRow = dataGridView1.SelectedRows[0];
                    if (selectedRow.Cells["idx"].Value != null)
                    {
                        int idx = (int)selectedRow.Cells["idx"].Value;
                        string query = "DELETE FROM component_T WHERE idx = @idx;";

                        using (SqlConnection con = new SqlConnection(connectionString))
                        {
                            try
                            {
                                con.Open();
                                using (SqlCommand cmd = new SqlCommand(query, con))
                                {
                                    cmd.Parameters.AddWithValue("@idx", idx);
                                    int result = cmd.ExecuteNonQuery();

                                    if (result > 0)
                                    {
                                        dataGridView1.Rows.Remove(selectedRow);
                                        MessageBox.Show("Deleted successfully.", "Deleted", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show($"An error occurred: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                            finally
                            {
                                con.Close();
                            }
                        }
                    }
                }
            }
            else
            {
                MessageBox.Show("Please select a row to delete.", "Select Row", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void btnSearch_Click(object sender, EventArgs e)
        {
            DateTime searchDate = dateReceived.Value.Date;

            string query = @"
            SELECT * 
            FROM component_T 
            WHERE CONVERT(DATE, enteredDate) = @searchDate
            ORDER BY enteredDate DESC;"; 

            using (SqlConnection con = new SqlConnection(connectionString))
            {
                try
                {
                    con.Open();
                    using (SqlCommand cmd = new SqlCommand(query, con))
                    {
                        cmd.Parameters.AddWithValue("@searchDate", searchDate);

                        DataTable dt = new DataTable();
                        using (SqlDataAdapter da = new SqlDataAdapter(cmd))
                        {
                            da.Fill(dt);
                        }
                        dataGridView1.DataSource = dt;
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"An error occurred: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                finally
                {
                    con.Close();
                }
            }
        }

        private int GetTypeIdxFromSystemSelection()
        {
            string selectedSystem = comboBox3.SelectedItem?.ToString() ?? string.Empty;
            switch (selectedSystem)
            {
                case "SYSTEM DT":
                    return 2;
                case "LAPTOP LT":
                    return 3;
                default:
                    return 0; // 기본값이나 오류 처리
            }
        }


        private void textBox2_TextChanged(object sender, EventArgs e)
        {
            bool isPullOutTabSelected = tabControl1.SelectedTab == tab_Pull;

            if (isPullOutTabSelected)
            {
                string inputText = textBox2.Text;

                if (!string.IsNullOrEmpty(inputText))
                {
                    // comboBox3의 선택에 따라 typeIdx를 결정합니다.
                    int typeIdx = GetTypeIdxFromSystemSelection();

                    string query = $"SELECT * FROM TypeSize WHERE typeIdx = {typeIdx} AND typeSizeName LIKE '%{inputText}%'";

                    using (SqlConnection con = new SqlConnection(connectionString))
                    {
                        con.Open();
                        using (SqlCommand cmd = new SqlCommand(query, con))
                        {
                            SqlDataAdapter da = new SqlDataAdapter(cmd);
                            DataTable dt = new DataTable();
                            da.Fill(dt);

                            dataGridView1.DataSource = dt;
                        }
                        con.Close();
                    }
                }
            }
        }
        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            int typeIdx = GetTypeIdxFromSelectedComponent();
        }
    }
}